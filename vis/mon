#!/bin/bash
#set -x
# Copyright (C) 2011 by Project SESA, Boston University
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Global configuration settings
declare -x -r DEFSLEEP="${FOXMON_SLEEP:-2}"
declare -x -r DEFCOUNT="${FOXMON_COUNT:-10}"

# Global Variables
typeset -x -i count
typeset -x -i sleep
typeset -x -i verbose
typeset -x -a nodes
typeset -x -a status
typeset -x -i num
typeset -x -i i
typeset -x -i cstat
typeset -x -i alive
typeset -x node

function usage
{
echo \
"USAGE: $(basename $0) [-v] [-h] [-c count] [-s sec] <node> [<node> ...]
         -h help
         -v verbose
         -c count : loop count: 0 is infinite default is $DEFCOUNT
         -s secs : seconds to sleep between loop intervals " > /dev/stderr
  exit -1
}

function VERBOSE
{
  ((verbose > 0)) && printf "$*\n" > /dev/stderr
}

function ERROR
{
    printf "ERROR: $*\n" > /dev/stderr
    usage 
}

function processArgs
{
  local    origargs="$@"
  local -i optcount=0
  
  count=$DEFCOUNT
  sleep=$DEFSLEEP

  while getopts "c:s:vh" OPT; do 
    case $OPT in
      ("h") usage; exit -1;;
      ("c") count="$OPTARG"; (( optcount+=2 ));;
      ("s") sleep="$OPTARG"; (( optcount+=2 ));;
      ("v") verbose=1;(( optcount+=1 ));;
    esac
  done

  shift $optcount
  nodes=( "$@" )
  num=${#nodes[@]}

  if (( num < 1 )); then
    ERROR "must specify at least one node"
  fi
}

# main

processArgs $@

status=( "${nodes[@]/*/1}" )

while true; 
do
    alive=0;
    for (( i=0 ; i<num; i++ ))
    do
	node=${nodes[$i]}
	cstat=${status[$i]}
	if (( $cstat == 1 )); then
	    VERBOSE "Checking $i: $node current $cstat"
	    if ping -c 1 $node >/dev/null 2>&1; then
		(( alive++ ))
	    else
		status[$i]=0
	    fi
	fi
	echo ${status[$i]}
    done
    echo "total: $num dead: $(( num - alive )) alive: $alive"
    if (( count >= 1 )); then
      (( count-- ))
      if (( count == 0 )); then
        exit;
      fi
    fi
    (( $sleep > 0 )) && sleep $sleep
done